<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Qlyfdljh&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-10T15:53:06.374Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>里屿</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot</title>
    <link href="http://example.com/2022/07/08/SpringBoot/"/>
    <id>http://example.com/2022/07/08/SpringBoot/</id>
    <published>2022-07-07T16:52:45.000Z</published>
    <updated>2022-07-10T15:53:06.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置git环境与项目创建"><a href="#配置git环境与项目创建" class="headerlink" title="配置git环境与项目创建"></a>配置git环境与项目创建</h2><h3 id="项目设计"><a href="#项目设计" class="headerlink" title="项目设计"></a>项目设计</h3><ul><li>名称：<code>King Of Bots</code>,简称<code>KOB</code></li><li>图标：<img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657250296/SpringBoot/ProjectConfig/kob.png"></li><li>项目包含的模块<ul><li>PK模块：匹配界面（微服务）、实况直播界面（WebSocket协议）</li><li>对局列表模块：对局列表界面、对局录像界面</li><li>排行榜模块：Bot排行榜界面</li><li>用户中心模块：注册界面、登陆界面、我的Bot界面、每个Bot的详情界面</li></ul></li><li>前后端分离模式<ul><li><code>SpringBoot</code></li><li><code>Vue3</code>实现Web端和Acapp端</li></ul></li></ul><h3 id="配置git环境"><a href="#配置git环境" class="headerlink" title="配置git环境"></a>配置git环境</h3><ol><li>安装<code>Git Bash</code></li><li>进入家目录生成秘钥：执行命令<code>ssh-keygen</code></li></ol><h3 id="仓库初始化"><a href="#仓库初始化" class="headerlink" title="仓库初始化"></a>仓库初始化</h3><p>​在已经创建好得项目文件夹下鼠标右键<code>Git Bash Here</code>：执行命令<code>git init</code>，执行完毕后文件夹下会出现隐藏<code>.git</code>文件，一般项目都会有<code>README</code>文件，执行命令<code>vim README.md</code></p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657341136/SpringBoot/ProjectConfig/gitconfig_0.png" style="zoom: 50%;" /><p><code>git status</code></p><p><code>git add .</code></p><p><code>git commit -m &quot;创建项目&quot;</code></p><h3 id="同步云端项目与本地项目"><a href="#同步云端项目与本地项目" class="headerlink" title="同步云端项目与本地项目"></a>同步云端项目与本地项目</h3><p>在Github上或其他代码托管平台上创建项目仓库</p><p>Git全局设置(如果本地有多个项目建议将下面命令中的global去掉)</p><ul><li><code>git config --global user.name &quot;Your name&quot;</code></li><li><code>git config --global user.email &quot;xxxxx@xxx.com&quot;</code></li></ul><p>将现有文件夹推送到云端</p><ul><li><code>git remote add origin git@github.com:wbsly/test.git</code></li><li><code>git push -u origin master</code></li></ul><p>刷新界面项目已经同步到云端</p><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657249911/SpringBoot/ProjectConfig/gitconfig_2.png"></p><h3 id="创建项目后端"><a href="#创建项目后端" class="headerlink" title="创建项目后端"></a>创建项目后端</h3><p>打开IntelliJ IDEA创建项目</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657251412/SpringBoot/ProjectConfig/springconfig_1.png" style="zoom: 80%;" /><p>如果一直加载失败连接超时报错</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657251772/SpringBoot/ProjectConfig/springconfig_2.png" style="zoom: 67%;" /><p>解决方法</p><ol><li>将<code>https://start.spring.io/</code>换成<code>https://start.aliyun.com</code></li><li><code>File</code>–&gt;<code>Settings</code></li></ol><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657287759/SpringBoot/ProjectConfig/springconfig_3.png" style="zoom:80%;" /><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657289249/SpringBoot/ProjectConfig/springconfig_4.png" style="zoom:80%;" /><p>此时重新创建项目就可以顺利的通过了</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657290213/SpringBoot/ProjectConfig/springconfig_5.png" style="zoom: 80%;" /><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657290508/SpringBoot/ProjectConfig/springconfig_6.png" style="zoom:80%;" /><p>首次创建需要等依赖下载完之后再进行操作（完成界面如下）</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657297553/SpringBoot/ProjectConfig/springconfig_7.png" style="zoom:80%;" /><p>测试是否成功</p><p>点击绿色的小三角按钮运行，控制台出现下方信息说明服务开到了本地的8080端口</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657298838/SpringBoot/ProjectConfig/springconfig_8.png" style="zoom: 33%;" /><p>在浏览器输入网址：<code>127.0.0.1:8080</code>或<code>localhost：8080</code>，页面出现以下内容则启动成功</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657299125/SpringBoot/ProjectConfig/springconfig_9.png" style="zoom:50%;" /><p><strong>小插曲</strong>：因为<code>Vue</code>默认的端口也是<code>8080</code>，前端后端的项目可能会冲突，我们将后端端口改成<code>3000</code>，打开<code>application.properties</code>将<code>server.port</code>改为<code>3000</code>，如果打开以后是空的说明用的是<code>Spring</code>默认端口，文件中添加<code>server.port=3000</code>。</p><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657379020/SpringBoot/ProjectConfig/springconfig_10.png"></p><hr><h3 id="创建项目Web端和AcApp端"><a href="#创建项目Web端和AcApp端" class="headerlink" title="创建项目Web端和AcApp端"></a>创建项目Web端和AcApp端</h3><ol><li><p>安装<code>Nodejs</code>：<a href="https://nodejs.org/en/">安装地址</a></p></li><li><p>安装<code>@vue/cli</code>：打开<code>Git Bash</code>或<code>管理员命令行</code>执行<code>npm i -g @vue/cli</code></p><p>如果执行后面的操作有bug，可能是最新版有问题，可以尝试安装早起版本，比如：<code>npm i -g @vue/cli@4</code></p></li><li><p>启动<code>vue</code>自带的图形化项目管理界面<code>vue ui</code></p><p>常见问题：Windows上运行<code>vue</code>，提示无法加载文件，表示用户权限不足</p><p>解决方案：用管理员身份打开终端，输入<code>set-ExecutionPolicy RemoteSigned</code>，然后输入<code>y</code></p></li></ol><p> 创建项目Web端<img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657339416/SpringBoot/ProjectConfig/vueconfig_1.png" style="zoom:80%;" /></p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657339592/SpringBoot/ProjectConfig/vueconfig_2.png" style="zoom: 33%;" /><p>安装插件</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657339837/SpringBoot/ProjectConfig/vueconfig_3.png" style="zoom:80%;" /><p>安装依赖</p><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657340184/SpringBoot/ProjectConfig/vueconfig_4.png"></p><p>运行</p><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657340417/SpringBoot/ProjectConfig/vueconfig_5.png"></p><p>出现如下界面表示项目创建成功</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657340542/SpringBoot/ProjectConfig/vueconfig_6.png" style="zoom: 33%;" /><p>同理再次创建项目acapp端（流程如上，插件只需添加<code>vuex</code>，不用安装依赖）</p><hr><p><code>vue</code>运行web端，页面地址栏多一个<code>#</code>号，比较麻烦，我们可以将<code>src</code>目录下的<code>router</code>的<code>index.js</code>文件里面的<code>Hash</code>删除</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657449277/SpringBoot/ProjectConfig/vueconfig_7.png" style="zoom:50%;" /><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657449784/SpringBoot/ProjectConfig/vueconfig_8.png"></p><p>删除无用文件：</p><ul><li><code>views</code>下的<code>AboutView.vue</code>、<code>HomeView.vue</code>、<code>App.vue</code>中的<code>css</code>内容、<code>nav</code>标签</li><li><code>src</code>下的<code>compoents</code>的<code>HelloWorld.vue</code></li><li><code>src</code>下的<code>router</code>的<code>index.js</code>中的<code>import HomeView from &#39;../views/HomeView.vue&#39;</code>和<code>const routes</code>括号中的内容</li></ul><hr><h3 id="测试前后端通信"><a href="#测试前后端通信" class="headerlink" title="测试前后端通信"></a>测试前后端通信</h3><p>每一个<code>vue</code>文件三个标签：</p><ul><li><code>template</code>：<code>html</code></li><li><code>script</code>：<code>JavaScript</code></li><li><code>style</code>：<code>css</code></li></ul><p><code>App.vue</code>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;Bot昵称：&#123;&#123; bot_name &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;Bot战力：&#123;&#123; bot_rating &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;router-view /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import $ from &quot;jquery&quot;;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  setup: () =&gt; &#123;</span><br><span class="line">    let bot_name = ref(&quot;&quot;);</span><br><span class="line">    let bot_rating = ref(&quot;&quot;);</span><br><span class="line"></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">      url: &quot;http://127.0.0.1:3000/pk/getbotinfo/&quot;,</span><br><span class="line">      type: &quot;get&quot;,</span><br><span class="line">      success: (resp) =&gt; &#123;</span><br><span class="line">        bot_name.value = resp.name;</span><br><span class="line">        bot_rating.value = resp.rating;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      bot_name,</span><br><span class="line">      bot_rating,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>跨域问题：</p><p>IP+端口号组合为域名，我们当前端口是<code>8080</code>调用链接为<code>3000</code>，两个域名不一样，浏览器的安全机制，造成跨域问题。</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657465678/SpringBoot/ProjectConfig/bug_1.png" style="zoom:50%;" /><p>**在SpringBoot中解决跨问题 ** ，添加配置类：<code>CorsConfig</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kob.backend.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) res;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) req;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">origin</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Origin&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(origin!=<span class="literal">null</span>) &#123;</span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, origin);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">headers</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Access-Control-Request-Headers&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(headers!=<span class="literal">null</span>) &#123;</span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>, headers);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Access-Control-Expose-Headers&quot;</span>, headers);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Max-Age&quot;</span>, <span class="string">&quot;3600&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line"></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决问题后，重启后端，刷新网页，前后端通信测试完成</p><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657466682/SpringBoot/ProjectConfig/test_1.png"></p><p>小插曲：添加背景图片，将背景图片下载到项目文件<code>src</code>目的<code>assets</code>下，在<code>App.vue</code>的style标签中自定义即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">body &#123;</span><br><span class="line">  background-image: url(&quot;@/assets/background.png&quot;);</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657467725/SpringBoot/ProjectConfig/background.png"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;配置git环境与项目创建&quot;&gt;&lt;a href=&quot;#配置git环境与项目创建&quot; class=&quot;headerlink&quot; title=&quot;配置git环境与项目创建&quot;&gt;&lt;/a&gt;配置git环境与项目创建&lt;/h2&gt;&lt;h3 id=&quot;项目设计&quot;&gt;&lt;a href=&quot;#项目设计&quot; cla</summary>
      
    
    
    
    
    <category term="SpringBoot" scheme="http://example.com/tags/SpringBoot/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="http://example.com/2022/07/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://example.com/2022/07/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-07-05T15:45:35.000Z</published>
    <updated>2022-07-11T16:06:37.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h3 id="数据结构在学什么？"><a href="#数据结构在学什么？" class="headerlink" title="数据结构在学什么？"></a>数据结构在学什么？</h3><ul><li>如何用程序代码把现实世界的问题信息化</li><li>如何用计算机高效地处理这些信息从而创造价值</li></ul><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657470484/DataStructures/introduction_1.png" style="zoom: 50%;" /><p>早期计算机——只用于处理纯数值问题</p><p>现代计算机——经常处理非数值型问题</p><p>对于非数值型的问题：</p><ul><li>我们关心每个个体的具体信息</li><li>我们还关心个体之间的关系</li></ul><hr><h3 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a>数据结构基本概念</h3><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657545924/DataStructures/introduction_3.png"></p><h4 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h4><ul><li>数据是<font color=red>信息的载体</font>，是描述客观事物属性的数、字符及所有能输入到计算机中并<font color=red>被计算机程序识别和处理（二进制0和1）</font>的符号的集合。数据是计算机程序加工的原料。</li></ul><h4 id="数据元素、数据项"><a href="#数据元素、数据项" class="headerlink" title="数据元素、数据项"></a>数据元素、数据项</h4><ul><li>数据元素是数据的基本单位，通常作为一个整体进行考虑和处理。一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位。</li></ul><h4 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h4><ul><li>数据对象是具有相同性质的数据元素的集合，是数据的一个子集。</li></ul><h4 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h4><ul><li>数据结构是相互之间存在一种或多种特定关系的数据元素的集合。</li></ul><p>tips：</p><ul><li>同样的数据元素，可组成不同的数据结构</li><li>不同的数据元素，可组成相同的数据结构</li></ul><hr><h3 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h3><p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657545927/DataStructures/introduction_4.png"></p><h4 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h4><p>​逻辑结构——数据元素之间的逻辑关系是什么？</p><p>集合结构：</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657545946/DataStructures/logicalstructure_1.png" style="zoom:50%;" /><p>线性结构：</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657545949/DataStructures/logicalstructure_2.png" style="zoom:50%;" /><p>树形结构：</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657545950/DataStructures/logicalstructure_3.png" style="zoom:50%;" /><p>图结构：</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657545951/DataStructures/logicalstructure_4.png" style="zoom:50%;" /><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><p>​物理结构（存储结构）——如何用计算机表示数据元素的逻辑关系？</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657555367/DataStructures/storagestructure_6.png" style="zoom:67%;" /><p>顺序存储：</p><ul><li>把<font color=red>逻辑上相邻的元素存储在物理位置上也相邻的存储单元中</font>,元素之间的关系由存储单元的邻接关系来体现。</li></ul><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657554085/DataStructures/storagestructure_2.png" style="zoom:67%;" /><p>链式存储：</p><ul><li><p>逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系。</p><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657554552/DataStructures/storagestructure_3.png" style="zoom:67%;" /></li></ul><p>索引存储：</p><ul><li>在存储元素信息的同时，还建立附加的索引表。索引表中的每项称为索引项，索引项的一般形式是（关键字、地址）。</li></ul><img src="https://res.cloudinary.com/qlyfdljh/image/upload/v1657555069/DataStructures/storagestructure_4.png" style="zoom:67%;" /><p>散列存储：</p><ul><li>根据元素的关键字直接计算出该元素的存储地址，又称<font color=red> 哈希(Hash)存储</font>。</li></ul><p>tips：</p><ol><li>若采用顺序存储，则各个数据元素在物理上必须是连续的；若采用非顺序结构，则各个数据元素在物理上可以是离散的。</li><li>数据的存储结构会影响存储空间分配的方便程度。</li><li>数据的存储结构会影响对数据运算的速度。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据结构&quot;&gt;&lt;a href=&quot;#数据结构&quot; class=&quot;headerlink&quot; title=&quot;数据结构&quot;&gt;&lt;/a&gt;数据结构&lt;/h1&gt;&lt;h2 id=&quot;绪论&quot;&gt;&lt;a href=&quot;#绪论&quot; class=&quot;headerlink&quot; title=&quot;绪论&quot;&gt;&lt;/a&gt;绪论&lt;/h</summary>
      
    
    
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Java语法</title>
    <link href="http://example.com/2022/07/04/Java%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/07/04/Java%E8%AF%AD%E6%B3%95/</id>
    <published>2022-07-03T16:26:35.000Z</published>
    <updated>2022-07-03T16:27:03.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java语法"><a href="#Java语法" class="headerlink" title="Java语法"></a>Java语法</h3><h4 id="1-1-变量、运算符、输入输出"><a href="#1-1-变量、运算符、输入输出" class="headerlink" title="1.1 变量、运算符、输入输出"></a>1.1 变量、运算符、输入输出</h4><p>类似于<code>C#</code>，<code>Java</code>的所有变量和函数都要定义在<code>class</code>中。</p><h5 id="1-1-1-内置数据类型"><a href="#1-1-1-内置数据类型" class="headerlink" title="1.1.1 内置数据类型"></a>1.1.1 内置数据类型</h5><table><thead><tr><th>类型</th><th>字节数</th><th>举例</th></tr></thead><tbody><tr><td>byte</td><td>1</td><td>123</td></tr><tr><td>short</td><td>2</td><td>12345</td></tr><tr><td>int</td><td>4</td><td>123456789</td></tr><tr><td>long</td><td>8</td><td>1234567891011L</td></tr><tr><td>float</td><td>4</td><td>1.2F</td></tr><tr><td>double</td><td>8</td><td>1.2, 1.2D</td></tr><tr><td>boolean</td><td>1</td><td>true, false</td></tr><tr><td>char</td><td>2</td><td>‘A’</td></tr></tbody></table><hr><h5 id="1-1-2-常量"><a href="#1-1-2-常量" class="headerlink" title="1.1.2 常量"></a>1.1.2 常量</h5><p>使用<code>final</code>修饰：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> <span class="number">110</span>;</span><br></pre></td></tr></table></figure><hr><h5 id="1-1-3-类型转化"><a href="#1-1-3-类型转化" class="headerlink" title="1.1.3 类型转化"></a>1.1.3 类型转化</h5><ul><li>显示转化： <code>int x = (int)&#39;A&#39;;</code></li><li>隐式转化：<code>double x = 12, y = 4 * 3.3;</code></li></ul><hr><h5 id="1-1-4-表达式"><a href="#1-1-4-表达式" class="headerlink" title="1.1.4 表达式"></a>1.1.4 表达式</h5><p>与C++、Python3类似：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (a + b) * c;</span><br><span class="line">x ++;</span><br></pre></td></tr></table></figure><hr><h5 id="1-1-5-输入"><a href="#1-1-5-输入" class="headerlink" title="1.1.5 输入"></a>1.1.5 输入</h5><p>方式1，效率较低，输入规模较小时使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next(); <span class="comment">// 读入下一个字符串</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt(); <span class="comment">// 读入下一个整数</span></span><br><span class="line"><span class="type">float</span> <span class="variable">t</span> <span class="operator">=</span> sc.nextFloat(); <span class="comment">// 读入下一个单精度浮点数</span></span><br><span class="line"><span class="type">double</span> <span class="variable">z</span> <span class="operator">=</span> sc.nextDouble(); <span class="comment">// 读入下一个双精度浮点数</span></span><br><span class="line"><span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> sc.nextLine(); <span class="comment">// 读入下一行</span></span><br></pre></td></tr></table></figure><p>方式2，效率较高，输入规模较大时使用。注意需要抛出异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="1-1-6-输出"><a href="#1-1-6-输出" class="headerlink" title="1.1.6 输出"></a>1.1.6 输出</h5><p>方式1，效率较低，输出规模较小时使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">123</span>);  <span class="comment">// 输出整数 + 换行</span></span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// 输出字符串 + 换行</span></span><br><span class="line">System.out.print(<span class="number">123</span>);  <span class="comment">// 输出整数</span></span><br><span class="line">System.out.print(<span class="string">&quot;ljh\n&quot;</span>);  <span class="comment">// 输出字符串</span></span><br><span class="line">System.out.printf(<span class="string">&quot;%04d %.2f\n&quot;</span>, <span class="number">4</span>, <span class="number">123.456D</span>);  <span class="comment">// 格式化输出，float与double都用%f输出</span></span><br></pre></td></tr></table></figure><p>方式2，效率较高，输出规模较大时使用。注意需要抛出异常。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(System.out));</span><br><span class="line">        bw.write(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line">        bw.flush();  <span class="comment">// 需要手动刷新缓冲区</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java语法&quot;&gt;&lt;a href=&quot;#Java语法&quot; class=&quot;headerlink&quot; title=&quot;Java语法&quot;&gt;&lt;/a&gt;Java语法&lt;/h3&gt;&lt;h4 id=&quot;1-1-变量、运算符、输入输出&quot;&gt;&lt;a href=&quot;#1-1-变量、运算符、输入输出&quot; class</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/07/04/%E7%A7%9F%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/"/>
    <id>http://example.com/2022/07/04/%E7%A7%9F%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/</id>
    <published>2022-07-03T16:26:35.000Z</published>
    <updated>2022-07-05T09:54:45.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="租云服务器及其配置"><a href="#租云服务器及其配置" class="headerlink" title="租云服务器及其配置"></a>租云服务器及其配置</h1><h2 id="租服务器"><a href="#租服务器" class="headerlink" title="租服务器"></a>租服务器</h2><p>腾讯云地址：<a href="https://cloud.tencent.com/">https://cloud.tencent.com/</a></p><hr><h2 id="远程登陆服务器"><a href="#远程登陆服务器" class="headerlink" title="远程登陆服务器"></a>远程登陆服务器</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">ssh user@hostname</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;租云服务器及其配置&quot;&gt;&lt;a href=&quot;#租云服务器及其配置&quot; class=&quot;headerlink&quot; title=&quot;租云服务器及其配置&quot;&gt;&lt;/a&gt;租云服务器及其配置&lt;/h1&gt;&lt;h2 id=&quot;租服务器&quot;&gt;&lt;a href=&quot;#租服务器&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="杂乱无章的配置" scheme="http://example.com/tags/%E6%9D%82%E4%B9%B1%E6%97%A0%E7%AB%A0%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://example.com/2022/06/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2022/06/16/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-06-16T14:33:27.000Z</published>
    <updated>2022-06-16T15:31:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Markdown-语法"><a href="#Markdown-语法" class="headerlink" title="Markdown 语法"></a>Markdown 语法</h1><h4 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h4><p>​这是一个链接<a href="http://qlyfdljh-blog.com/">我的博客</a></p><p>​<a href="http://qlyfdljh-blog.com/">http://qlyfdljh-blog.com/</a></p><h4 id="字体："><a href="#字体：" class="headerlink" title="字体："></a>字体：</h4><p><em>斜体</em></p><p><strong>粗体</strong></p><p><em><strong>粗斜体</strong></em></p><h4 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h4><hr><h4 id="删除线："><a href="#删除线：" class="headerlink" title="删除线："></a>删除线：</h4><p>​<del>这句话被删除了</del></p><h4 id="下划线："><a href="#下划线：" class="headerlink" title="下划线："></a>下划线：</h4><p>​<u>嘿嘿嘿</u></p><h4 id="脚注："><a href="#脚注：" class="headerlink" title="脚注："></a>脚注：</h4><p>​创建脚注格式类似这样[^脚注]。</p><p>​[^脚注]：是对文本的补充说明。</p><h4 id="代码块测试："><a href="#代码块测试：" class="headerlink" title="代码块测试："></a>代码块测试：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello World ！&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>Be happy every day！</code></p><h4 id="图片测试："><a href="#图片测试：" class="headerlink" title="图片测试："></a>图片测试：</h4><p><img src="https://img2.baidu.com/it/u=3660571040,1999579994&fm=253&fmt=auto&app=120&f=JPEG?w=628&h=500" alt="这是一张图片"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Markdown-语法&quot;&gt;&lt;a href=&quot;#Markdown-语法&quot; class=&quot;headerlink&quot; title=&quot;Markdown 语法&quot;&gt;&lt;/a&gt;Markdown 语法&lt;/h1&gt;&lt;h4 id=&quot;链接：&quot;&gt;&lt;a href=&quot;#链接：&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="markdown" scheme="http://example.com/tags/markdown/"/>
    
  </entry>
  
</feed>
